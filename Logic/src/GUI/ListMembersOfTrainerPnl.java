/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import CustomGUI.Message;
import Logic.Employee;
import Logic.GymSystem;
import Logic.Member;
import Logic.PersonalTrainer;
import Logic.PolytechnicStaff;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author alija
 */
public class ListMembersOfTrainerPnl extends javax.swing.JPanel {

    /**
     * Creates new form ListMembersOfTrainerPnl
     */
        Message obj = new Message();
        int trainerID;
    public ListMembersOfTrainerPnl() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        trainerMembersTable = new Table.Table();

        setBackground(new java.awt.Color(42, 107, 120));

        trainerMembersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Member ID", "Member Name", "Member Type", "Phone"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        trainerMembersTable.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        trainerMembersTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        trainerMembersTable.setShowGrid(true);
        trainerMembersTable.setShowVerticalLines(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(88, Short.MAX_VALUE)
                .addComponent(trainerMembersTable, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(103, Short.MAX_VALUE)
                .addComponent(trainerMembersTable, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75))
        );

        if (trainerMembersTable.getColumnModel().getColumnCount() > 0) {
            trainerMembersTable.getColumnModel().getColumn(0).setResizable(false);
            trainerMembersTable.getColumnModel().getColumn(1).setResizable(false);
            trainerMembersTable.getColumnModel().getColumn(2).setResizable(false);
            trainerMembersTable.getColumnModel().getColumn(3).setResizable(false);
        }
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Table.Table trainerMembersTable;
    // End of variables declaration//GEN-END:variables
    public void showData() {
        DefaultTableModel model = (DefaultTableModel) trainerMembersTable.getModel();
        model.setRowCount(0);
        PersonalTrainer empFound = null;
        for (Employee emp : GymSystem.employees) {
            if (emp instanceof PersonalTrainer) {
//                String empIDString = "" + emp.getId();
                if (emp.getId() == (trainerID)) {
                    empFound = (PersonalTrainer) emp;
                    break;
                }
            }
        }
        for (Member mem : empFound.getMembers()) {
            if (mem instanceof PolytechnicStaff) {
                trainerMembersTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Staff", mem.getPhone()});
            } else {
                trainerMembersTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Student", mem.getPhone()});
            }
        }
//        lblTrainerName.setText("<html>" + empFound.getFullName() + " Members List</html>");
    }
}
