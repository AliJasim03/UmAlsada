/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;
//testing github

import Calander.*;
import GlassPanePopup.GlassPanePopup;
import Logic.*;
import java.awt.CardLayout;
import FileManager.*;
// all the bellow libraries only to do rounded panel :)
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.table.DefaultTableModel;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 *
 * @author alija
 */
public class MainPage extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form NewJFrame
     */
    CardLayout cardLayout;

    public MainPage() throws IOException, ClassNotFoundException {
        FileManager.getInstance().ReadEmployees();
        FileManager.getInstance().ReadMembers();
        Employee.loadEmpCount();
        Member.loadEmpCount();
        FileManager.getInstance().loadStartupFile();
        initComponents();
        GlassPanePopup.install(this);

        cardLayout = (CardLayout) (pnlCards.getLayout());

        employeesTable.fixTable(jScrollPane);
        membersTable.fixTable(jScrollPane1);
        membersAssignTrainerTable.fixTable(jScrollPane2);
        personalTrainerTable.fixTable(jScrollPane3);
        trainerMembersTable.fixTable(jScrollPane4);
        dateChooser.addEventDateChooser(new EventDateChooser() {
            @Override
            public void dateSelected(SelectedAction action, SelectedDate date) {
                System.out.println(date.getDay() + "-" + date.getMonth() + "-" + date.getYear());
                if (action.getAction() == SelectedAction.DAY_SELECTED) {
                    dateChooser.hidePopup();
                }
            }
        });
        dateChooserEdit.addEventDateChooser(new EventDateChooser() {
            @Override
            public void dateSelected(SelectedAction action, SelectedDate date) {
                System.out.println(date.getDay() + "-" + date.getMonth() + "-" + date.getYear());
                if (action.getAction() == SelectedAction.DAY_SELECTED) {
                    dateChooserEdit.hidePopup();
                }
            }
        });
//        membersAssignTrainerTable.getColumnModel().getColumn(3).setCellRenderer(new ComboBoxCellRender());
//        membersAssignTrainerTable.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(new Cope()));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderButtonGroup = new javax.swing.ButtonGroup();
        employeeTypeBtnGroup = new javax.swing.ButtonGroup();
        memberTypeGroupButton = new javax.swing.ButtonGroup();
        genderButtonGroupEdit = new javax.swing.ButtonGroup();
        mainPage = new javax.swing.JSplitPane();
        nvigPnl = new javax.swing.JPanel();
        gymImage = new javax.swing.JLabel();
        bahrainLabel = new javax.swing.JLabel();
        polyLabel = new javax.swing.JLabel();
        emoployeeSectionLabel = new javax.swing.JLabel();
        memberSectionLabel = new javax.swing.JLabel();
        pnlCards = new javax.swing.JPanel();
        dashboardPnl = new javax.swing.JPanel();
        addMemberImageBtn = new javax.swing.JButton();
        addEmployeeImageBtn = new javax.swing.JButton();
        assignTrainerImageBtn = new javax.swing.JButton();
        truckMemberInformationImageBtn = new javax.swing.JButton();
        truckEmployeeInformationImageBtn = new javax.swing.JButton();
        addEmployeePnl = new javax.swing.JPanel();
        addMemberPnl = new javax.swing.JPanel();
        manageEmployeesPnl = new javax.swing.JPanel();
        manageMemberssPnl = new javax.swing.JPanel();
        listPersonalTrainerPnl = new javax.swing.JPanel();
        trainerMembersPnl = new javax.swing.JPanel();
        assignTrainerPnl = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        editEmployeePnl = new javax.swing.JPanel();
        editMemberPnl = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gym System\n");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        mainPage.setDividerSize(1);
        mainPage.setPreferredSize(new java.awt.Dimension(960, 540));

        nvigPnl.setBackground(new java.awt.Color(11, 158, 191));
        nvigPnl.setPreferredSize(new java.awt.Dimension(187, 540));

        gymImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gymImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Gym logo 1.png"))); // NOI18N
        gymImage.setAlignmentY(0.0F);

        bahrainLabel.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        bahrainLabel.setForeground(new java.awt.Color(255, 255, 255));
        bahrainLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bahrainLabel.setText("Bahrain");

        polyLabel.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        polyLabel.setForeground(new java.awt.Color(255, 255, 255));
        polyLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        polyLabel.setText("Polytechnic Gym ");

        emoployeeSectionLabel.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        emoployeeSectionLabel.setForeground(new java.awt.Color(255, 255, 255));
        emoployeeSectionLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/user-alt.png"))); // NOI18N
        emoployeeSectionLabel.setText("Employee Section");
        emoployeeSectionLabel.setIconTextGap(10);

        memberSectionLabel.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        memberSectionLabel.setForeground(new java.awt.Color(255, 255, 255));
        memberSectionLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/user-alt.png"))); // NOI18N
        memberSectionLabel.setText("Members section");
        memberSectionLabel.setIconTextGap(10);

        javax.swing.GroupLayout nvigPnlLayout = new javax.swing.GroupLayout(nvigPnl);
        nvigPnl.setLayout(nvigPnlLayout);
        nvigPnlLayout.setHorizontalGroup(
            nvigPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nvigPnlLayout.createSequentialGroup()
                .addGroup(nvigPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(nvigPnlLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(nvigPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(memberSectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(emoployeeSectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(nvigPnlLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(nvigPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(bahrainLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(polyLabel, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(nvigPnlLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(gymImage, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        nvigPnlLayout.setVerticalGroup(
            nvigPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nvigPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gymImage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bahrainLabel)
                .addGap(0, 0, 0)
                .addComponent(polyLabel)
                .addGap(60, 60, 60)
                .addComponent(emoployeeSectionLabel)
                .addGap(138, 138, 138)
                .addComponent(memberSectionLabel)
                .addContainerGap(233, Short.MAX_VALUE))
        );

        mainPage.setLeftComponent(nvigPnl);

        pnlCards.setBackground(new java.awt.Color(2, 73, 89));
        pnlCards.setPreferredSize(new java.awt.Dimension(773, 540));
        pnlCards.setLayout(new java.awt.CardLayout());

        dashboardPnl.setBackground(new java.awt.Color(2, 73, 89));
        dashboardPnl.setPreferredSize(new java.awt.Dimension(773, 545));

        addMemberImageBtn.setBackground(new java.awt.Color(2, 73, 89));
        addMemberImageBtn.setForeground(new java.awt.Color(78, 80, 82));
        addMemberImageBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/addMemberImage.png"))); // NOI18N
        addMemberImageBtn.setBorder(null);
        addMemberImageBtn.setBorderPainted(false);
        addMemberImageBtn.setContentAreaFilled(false);
        addMemberImageBtn.setFocusPainted(false);
        addMemberImageBtn.setFocusable(false);
        addMemberImageBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addMemberImageBtn.setIconTextGap(0);
        addMemberImageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMemberImageBtnActionPerformed(evt);
            }
        });

        addEmployeeImageBtn.setBackground(new java.awt.Color(2, 73, 89));
        addEmployeeImageBtn.setForeground(new java.awt.Color(78, 80, 82));
        addEmployeeImageBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/addEmployeeImage.png"))); // NOI18N
        addEmployeeImageBtn.setBorder(null);
        addEmployeeImageBtn.setBorderPainted(false);
        addEmployeeImageBtn.setContentAreaFilled(false);
        addEmployeeImageBtn.setFocusPainted(false);
        addEmployeeImageBtn.setFocusable(false);
        addEmployeeImageBtn.setIconTextGap(0);
        addEmployeeImageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmployeeImageBtnActionPerforme(evt);
            }
        });

        assignTrainerImageBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/assignTrainerImage.png"))); // NOI18N
        assignTrainerImageBtn.setBorderPainted(false);
        assignTrainerImageBtn.setContentAreaFilled(false);
        assignTrainerImageBtn.setFocusPainted(false);
        assignTrainerImageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignTrainerImageBtnActionPerformed(evt);
            }
        });

        truckMemberInformationImageBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/trackMemeberInformaionImage.png"))); // NOI18N
        truckMemberInformationImageBtn.setBorderPainted(false);
        truckMemberInformationImageBtn.setContentAreaFilled(false);
        truckMemberInformationImageBtn.setFocusPainted(false);
        truckMemberInformationImageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                truckMemberInformationImageBtnActionPerformed(evt);
            }
        });

        truckEmployeeInformationImageBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/trackEmployeeImage.png"))); // NOI18N
        truckEmployeeInformationImageBtn.setBorderPainted(false);
        truckEmployeeInformationImageBtn.setContentAreaFilled(false);
        truckEmployeeInformationImageBtn.setFocusPainted(false);
        truckEmployeeInformationImageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                truckEmployeeInformationImageBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dashboardPnlLayout = new javax.swing.GroupLayout(dashboardPnl);
        dashboardPnl.setLayout(dashboardPnlLayout);
        dashboardPnlLayout.setHorizontalGroup(
            dashboardPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dashboardPnlLayout.createSequentialGroup()
                .addContainerGap(229, Short.MAX_VALUE)
                .addGroup(dashboardPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(truckEmployeeInformationImageBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(truckMemberInformationImageBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(assignTrainerImageBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(dashboardPnlLayout.createSequentialGroup()
                        .addComponent(addEmployeeImageBtn)
                        .addGap(18, 18, 18)
                        .addComponent(addMemberImageBtn)))
                .addContainerGap(210, Short.MAX_VALUE))
        );
        dashboardPnlLayout.setVerticalGroup(
            dashboardPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dashboardPnlLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(dashboardPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addMemberImageBtn)
                    .addComponent(addEmployeeImageBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(assignTrainerImageBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(truckMemberInformationImageBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(truckEmployeeInformationImageBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlCards.add(dashboardPnl, "dashboardPnl");

        addEmployeePnl.setBackground(new java.awt.Color(2, 73, 89));
        addEmployeePnl.setForeground(new java.awt.Color(255, 255, 255));
        addEmployeePnl.setPreferredSize(new java.awt.Dimension(773, 545));

        javax.swing.GroupLayout addEmployeePnlLayout = new javax.swing.GroupLayout(addEmployeePnl);
        addEmployeePnl.setLayout(addEmployeePnlLayout);
        addEmployeePnlLayout.setHorizontalGroup(
            addEmployeePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 773, Short.MAX_VALUE)
        );
        addEmployeePnlLayout.setVerticalGroup(
            addEmployeePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 590, Short.MAX_VALUE)
        );

        pnlCards.add(addEmployeePnl, "addEmployeePnl");

        addMemberPnl.setBackground(new java.awt.Color(2, 73, 89));
        addMemberPnl.setForeground(new java.awt.Color(255, 255, 255));
        addMemberPnl.setPreferredSize(new java.awt.Dimension(773, 545));
        addMemberPnl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        javax.swing.GroupLayout addMemberPnlLayout = new javax.swing.GroupLayout(addMemberPnl);
        addMemberPnl.setLayout(addMemberPnlLayout);
        addMemberPnlLayout.setHorizontalGroup(
            addMemberPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 773, Short.MAX_VALUE)
        );
        addMemberPnlLayout.setVerticalGroup(
            addMemberPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 590, Short.MAX_VALUE)
        );

        pnlCards.add(addMemberPnl, "addMemberPnl");

        manageEmployeesPnl.setBackground(new java.awt.Color(2, 73, 89));
        manageEmployeesPnl.setForeground(new java.awt.Color(255, 255, 255));
        manageEmployeesPnl.setPreferredSize(new java.awt.Dimension(773, 545));

        javax.swing.GroupLayout manageEmployeesPnlLayout = new javax.swing.GroupLayout(manageEmployeesPnl);
        manageEmployeesPnl.setLayout(manageEmployeesPnlLayout);
        manageEmployeesPnlLayout.setHorizontalGroup(
            manageEmployeesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 773, Short.MAX_VALUE)
        );
        manageEmployeesPnlLayout.setVerticalGroup(
            manageEmployeesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 590, Short.MAX_VALUE)
        );

        pnlCards.add(manageEmployeesPnl, "manageEmployeesPnl");

        manageMemberssPnl.setBackground(new java.awt.Color(2, 73, 89));
        manageMemberssPnl.setForeground(new java.awt.Color(255, 255, 255));
        manageMemberssPnl.setPreferredSize(new java.awt.Dimension(773, 545));

        javax.swing.GroupLayout manageMemberssPnlLayout = new javax.swing.GroupLayout(manageMemberssPnl);
        manageMemberssPnl.setLayout(manageMemberssPnlLayout);
        manageMemberssPnlLayout.setHorizontalGroup(
            manageMemberssPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 773, Short.MAX_VALUE)
        );
        manageMemberssPnlLayout.setVerticalGroup(
            manageMemberssPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 590, Short.MAX_VALUE)
        );

        pnlCards.add(manageMemberssPnl, "manageMembersPnl");

        listPersonalTrainerPnl.setBackground(new java.awt.Color(2, 73, 89));
        listPersonalTrainerPnl.setForeground(new java.awt.Color(255, 255, 255));
        listPersonalTrainerPnl.setPreferredSize(new java.awt.Dimension(773, 545));

        javax.swing.GroupLayout listPersonalTrainerPnlLayout = new javax.swing.GroupLayout(listPersonalTrainerPnl);
        listPersonalTrainerPnl.setLayout(listPersonalTrainerPnlLayout);
        listPersonalTrainerPnlLayout.setHorizontalGroup(
            listPersonalTrainerPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 773, Short.MAX_VALUE)
        );
        listPersonalTrainerPnlLayout.setVerticalGroup(
            listPersonalTrainerPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 590, Short.MAX_VALUE)
        );

        pnlCards.add(listPersonalTrainerPnl, "listPersonalTrainerPnl");

        trainerMembersPnl.setBackground(new java.awt.Color(2, 73, 89));
        trainerMembersPnl.setForeground(new java.awt.Color(255, 255, 255));
        trainerMembersPnl.setPreferredSize(new java.awt.Dimension(773, 545));

        javax.swing.GroupLayout trainerMembersPnlLayout = new javax.swing.GroupLayout(trainerMembersPnl);
        trainerMembersPnl.setLayout(trainerMembersPnlLayout);
        trainerMembersPnlLayout.setHorizontalGroup(
            trainerMembersPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 773, Short.MAX_VALUE)
        );
        trainerMembersPnlLayout.setVerticalGroup(
            trainerMembersPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 590, Short.MAX_VALUE)
        );

        pnlCards.add(trainerMembersPnl, "trainerMembersPnl");

        assignTrainerPnl.setBackground(new java.awt.Color(2, 73, 89));
        assignTrainerPnl.setForeground(new java.awt.Color(255, 255, 255));
        assignTrainerPnl.setPreferredSize(new java.awt.Dimension(773, 545));

        javax.swing.GroupLayout assignTrainerPnlLayout = new javax.swing.GroupLayout(assignTrainerPnl);
        assignTrainerPnl.setLayout(assignTrainerPnlLayout);
        assignTrainerPnlLayout.setHorizontalGroup(
            assignTrainerPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 773, Short.MAX_VALUE)
        );
        assignTrainerPnlLayout.setVerticalGroup(
            assignTrainerPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 590, Short.MAX_VALUE)
        );

        pnlCards.add(assignTrainerPnl, "assignTrainerPnl");

        jPanel3.setBackground(new java.awt.Color(2, 73, 89));
        jPanel3.setPreferredSize(new java.awt.Dimension(773, 545));

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(692, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(254, 254, 254)
                .addComponent(jButton1)
                .addContainerGap(313, Short.MAX_VALUE))
        );

        pnlCards.add(jPanel3, "testing");

        editEmployeePnl.setBackground(new java.awt.Color(2, 73, 89));
        editEmployeePnl.setForeground(new java.awt.Color(255, 255, 255));
        editEmployeePnl.setPreferredSize(new java.awt.Dimension(773, 545));
        editEmployeePnl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        javax.swing.GroupLayout editEmployeePnlLayout = new javax.swing.GroupLayout(editEmployeePnl);
        editEmployeePnl.setLayout(editEmployeePnlLayout);
        editEmployeePnlLayout.setHorizontalGroup(
            editEmployeePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 773, Short.MAX_VALUE)
        );
        editEmployeePnlLayout.setVerticalGroup(
            editEmployeePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 590, Short.MAX_VALUE)
        );

        pnlCards.add(editEmployeePnl, "editEmployeePnl");

        editMemberPnl.setBackground(new java.awt.Color(2, 73, 89));
        editMemberPnl.setForeground(new java.awt.Color(255, 255, 255));
        editMemberPnl.setPreferredSize(new java.awt.Dimension(773, 545));
        editMemberPnl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                editMemberPnlrepaintShadowForTextFields(evt);
            }
        });

        javax.swing.GroupLayout editMemberPnlLayout = new javax.swing.GroupLayout(editMemberPnl);
        editMemberPnl.setLayout(editMemberPnlLayout);
        editMemberPnlLayout.setHorizontalGroup(
            editMemberPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 773, Short.MAX_VALUE)
        );
        editMemberPnlLayout.setVerticalGroup(
            editMemberPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 590, Short.MAX_VALUE)
        );

        pnlCards.add(editMemberPnl, "editMemberPnl");

        mainPage.setRightComponent(pnlCards);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPage, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addMemberImageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMemberImageBtnActionPerformed
        // TODO add your handling code here:

        cardLayout.show(pnlCards, "addMemberPnl");
    }//GEN-LAST:event_addMemberImageBtnActionPerformed

    private void addEmployeeImageBtnActionPerforme(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmployeeImageBtnActionPerforme
        // TODO add your handling code here:
        cardLayout.show(pnlCards, "addEmployeePnl");
    }//GEN-LAST:event_addEmployeeImageBtnActionPerforme

    private void assignTrainerImageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignTrainerImageBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_assignTrainerImageBtnActionPerformed

    private void truckMemberInformationImageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_truckMemberInformationImageBtnActionPerformed
        // TODO add your handling code here:
        cardLayout.show(pnlCards, "manageMembersPnl");

    }//GEN-LAST:event_truckMemberInformationImageBtnActionPerformed

    private void truckEmployeeInformationImageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_truckEmployeeInformationImageBtnActionPerformed
        // TODO add your handling code here:
        cardLayout.show(pnlCards, "manageEmployeesPnl");
    }//GEN-LAST:event_truckEmployeeInformationImageBtnActionPerformed

    private void txtFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFirstNameActionPerformed

    private void txtPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhoneActionPerformed

    private void txtSurnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSurnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSurnameActionPerformed

    private void txtSportTeamOrDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSportTeamOrDepartmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSportTeamOrDepartmentActionPerformed

    private void txtAdressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAdressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAdressActionPerformed

    private void txtMajorOrPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMajorOrPositionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMajorOrPositionActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        ArrayList<TextField> textFields = new ArrayList<TextField>();
        textFields.add(txtFirstName);
        textFields.add(txtSurname);
        textFields.add(txtAdress);
        textFields.add(txtPhone);
        textFields.add(txtDob);
        textFields.add(txtMajorOrPosition);
        textFields.add(txtSportTeamOrDepartment);
        clearTextFields(textFields);
        genderButtonGroup.clearSelection();
        memberTypeGroupButton.clearSelection();
    }//GEN-LAST:event_clearBtnActionPerformed

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        // TODO add your handling code here:
//        ArrayList<TextField> textFields = new ArrayList<TextField>();
//        String[] errors = {"name", "phone"};
//        textFields.add(nametxt);
//        textFields.add(textField1);
//        int errorCoutner = 0;
//        for (TextField textField : textFields) {
////            String checkText = checkTxtField(textField, errors[errorCoutner]);
//            errorCoutner++;
//            if (checkText == null) {
//                break;
//            }
//        }
        try {
            FileManager.getInstance().ReadMembers();
            // Assuming GymSystem.members is a list of type Student
            Member student = GymSystem.members.get(0); // Retrieve the object at index 0

// Casting to PolytechnicStudent
            PolytechnicStudent polyStudent = (PolytechnicStudent) student;
            System.out.println(polyStudent);

            System.out.println(GymSystem.members.get(0).getFirstName());
            System.out.println(GymSystem.members.get(0).getLastName());
            System.out.println(GymSystem.members.get(0).getId());
            System.out.println(GymSystem.members.get(0).getFullName());
            System.out.println(GymSystem.members.get(0).getAddress());
            System.out.println(GymSystem.members.get(0).getPhone());
            System.out.println(GymSystem.members.get(0).getGender());
            System.out.println(GymSystem.members.get(0).getBirthDate());
            System.out.println(polyStudent.getMajor());
            System.out.println(polyStudent.getTeam());
        } catch (Exception e) {
            System.out.println(e);
        }

    }//GEN-LAST:event_button1ActionPerformed

    private void textField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textField1ActionPerformed
        repaitShadow(evt.getSource());
    }//GEN-LAST:event_textField1ActionPerformed

    private void dashboardBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dashboardBtnActionPerformed
        cardLayout.show(pnlCards, "dashboardPnl");
    }//GEN-LAST:event_dashboardBtnActionPerformed

    private void addEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmployeeButtonActionPerformed
        cardLayout.show(pnlCards, "addEmployeePnl");
    }//GEN-LAST:event_addEmployeeButtonActionPerformed

    private void manageEmployeesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageEmployeesButtonActionPerformed
        populateEmployeesTable();
        cardLayout.show(pnlCards, "manageEmployeesPnl");
    }//GEN-LAST:event_manageEmployeesButtonActionPerformed

    private void listTrainersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listTrainersButtonActionPerformed
        populateTrainersTable();
        cardLayout.show(pnlCards, "listPersonalTrainerPnl");
    }//GEN-LAST:event_listTrainersButtonActionPerformed

    private void addMemberButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMemberButtonActionPerformed
        cardLayout.show(pnlCards, "addMemberPnl");
        // TODO add your handling code here:
    }//GEN-LAST:event_addMemberButtonActionPerformed

    private void manageMemberButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageMemberButtonActionPerformed
        populateMembersTable();
        cardLayout.show(pnlCards, "manageMembersPnl");
    }//GEN-LAST:event_manageMemberButtonActionPerformed

    private void assignTrainerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignTrainerButtonActionPerformed
        assignTrainerComboBox();
        for (Member mem : GymSystem.members) {
            boolean found = false;
            String name = null;
            int id = 0;
            for (Employee emp : GymSystem.employees) {
                if (emp instanceof PersonalTrainer) {

                    for (Member empFound : ((PersonalTrainer) emp).getMembers()) {
                        if (empFound.getId() == mem.getId()) {
                            found = true;
                            name = emp.getFullName();
                            id = emp.getId();
                            break;
                        }
                    }
                }
            }

            if (found) {
                membersAssignTrainerTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Staff", name + " (" + id + ")"});
            } else if (!found) {
                membersAssignTrainerTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Student", "(None)"});
            }

        }

//        membersAssignTrainerTable.setValueAt("(None)", 0, 3);
        cardLayout.show(pnlCards, "assignTrainerPnl");
    }//GEN-LAST:event_assignTrainerButtonActionPerformed

    private void changNvgButtonBackgroundColor(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changNvgButtonBackgroundColor
        // TODO add your handling code here:
    }//GEN-LAST:event_changNvgButtonBackgroundColor

    private void marketingReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_marketingReportBtnActionPerformed

        Message obj = new Message();
        obj.eventOK(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                GlassPanePopup.closePopupLast();
            }
        });
        obj.jLabel1.setText("Report have been generated");
        obj.jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/noteMassageIcon.png"))); // NOI18N
        GlassPanePopup.showPopup(obj);
        cardLayout.show(pnlCards, "testing");
    }//GEN-LAST:event_marketingReportBtnActionPerformed

    private void nametxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nametxtKeyTyped
//        repaitShadow(evt.getSource());
//    ((TextField)evt.getSource()).setShadowColor(darkBlue);
    }//GEN-LAST:event_nametxtKeyTyped

    private void txtSurnameEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSurnameEmployeeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSurnameEmployeeActionPerformed

    private void txtAddressEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddressEmployeeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddressEmployeeActionPerformed

    private void txtPhoneEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPhoneEmployeeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhoneEmployeeActionPerformed

    private void txtSalaryEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSalaryEmployeeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSalaryEmployeeActionPerformed

    private void employeeRadioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeRadioBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeRadioBtnActionPerformed

    private void clearEmployeeFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearEmployeeFormBtnActionPerformed
        ArrayList<TextField> textFields = new ArrayList<TextField>();
        textFields.add(txtFirstNameEmployee);
        textFields.add(txtSurnameEmployee);
        textFields.add(txtAddressEmployee);
        textFields.add(txtPhoneEmployee);
        textFields.add(txtSalaryEmployee);
        clearTextFields(textFields);
        employeeTypeBtnGroup.clearSelection();
    }//GEN-LAST:event_clearEmployeeFormBtnActionPerformed

    private void addEmployeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmployeeBtnActionPerformed
        int errorCoutner;
        ArrayList<TextField> textFields = new ArrayList<TextField>();
        String[] errors = {"first name", "sur name", "Address", "Phone", "Salary"};
        textFields.add(txtFirstNameEmployee);
        textFields.add(txtSurnameEmployee);
        textFields.add(txtAddressEmployee);
        textFields.add(txtPhoneEmployee);
        textFields.add(txtSalaryEmployee);
        errorCoutner = 0;
        for (TextField textField : textFields) {
            if (!checkTxtField(textField, errors[errorCoutner])) {
                return;
            }
            errorCoutner++;
        }
        if (!checkRadioButtonGroup(employeeTypeBtnGroup, "Employee type")) {
            return;
        }

        errorCoutner = 0;
        for (TextField textField : textFields) {
            if (!containsOnlyLetters(textField, errors[errorCoutner])) {
                return;
            }
            errorCoutner++;
            if (errorCoutner == 2) {
                break;
            }
        }
        for (int i = 3; i < textFields.size(); i++) {
            if (!containsOnlyNumbers(textFields.get(i), errors[i])) {
                return;
            }
        }

        addEmployee(textFields);
        try {
            FileManager.getInstance().WriteEmployee();
            Employee.saveEmpCount();
        } catch (IOException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_addEmployeeBtnActionPerformed

    private void nametxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nametxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nametxtActionPerformed

    private void repaintShadowForTextFields(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_repaintShadowForTextFields
//         ((TextField)evt.getSource()).setShadowColor(new Color(170,170,170));
//          ((TextField)evt.getSource()).createImageShadow();
//         ((TextField)evt.getSource()).repaint();

        repaitShadow(evt.getSource());
    }//GEN-LAST:event_repaintShadowForTextFields

    private void pickDateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickDateBtnActionPerformed
        dateChooser.setTextRefernce(txtDob);
        dateChooser.showPopup();
        SelectedDate d = dateChooser.getSelectedDate();
        System.out.println(d.getDay() + "-" + d.getMonth() + "-" + d.getYear());
        System.out.println("Text : " + txtDob.getText());
    }//GEN-LAST:event_pickDateBtnActionPerformed

    private void addMemberBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMemberBtnActionPerformed
        int errorCoutner;
        ArrayList<TextField> textFields = new ArrayList<TextField>();
        ArrayList<String> errors = new ArrayList<String>(Arrays.asList("first name", "sur name", "Address", "Phone", "Date of birth"));
        textFields.add(txtFirstName);
        textFields.add(txtSurname);
        textFields.add(txtAdress);
        textFields.add(txtPhone);
        textFields.add(txtDob);
        errorCoutner = 0;
        for (TextField textField : textFields) {
            if (!checkTxtField(textField, errors.get(errorCoutner))) {
                return;
            }
            errorCoutner++;
        }

        if (!checkRadioButtonGroup(genderButtonGroup, "Gender")) {
            return;
        }
        if (!checkRadioButtonGroup(memberTypeGroupButton, "Member type")) {
            return;
        }

        textFields.add(txtMajorOrPosition);
        if (studentBtn.isSelected()) {
            errors.add("Major");
        } else {
            textFields.add(txtSportTeamOrDepartment);
            errors.add("Position");
            errors.add("Depatment");
        }
        errorCoutner = 0;
        for (TextField textField : textFields) {
            if (!checkTxtField(textField, errors.get(errorCoutner))) {
                return;
            }
            errorCoutner++;
        }

        ArrayList<TextField> letterTextFields = new ArrayList<TextField>();
        letterTextFields.add(txtFirstName);
        letterTextFields.add(txtSurname);
        letterTextFields.add(txtMajorOrPosition);
        letterTextFields.add(txtSportTeamOrDepartment);
        ArrayList<String> letterErrors = new ArrayList<String>(Arrays.asList("first name", "sur name"));
        if (studentBtn.isSelected()) {
            letterErrors.add("Major");
            letterErrors.add("Sport Team");
        } else {
            letterErrors.add("Position");
            letterErrors.add("Depatment");
        }
        errorCoutner = 0;
        for (TextField textField : letterTextFields) {
            if (!containsOnlyLetters(textField, letterErrors.get(errorCoutner))) {
                return;
            }
            errorCoutner++;

        }

        if (!containsOnlyNumbers(txtPhone, "Phone")) {
            return;
        }

        textFields = new ArrayList<TextField>();
        textFields.add(txtFirstName);
        textFields.add(txtSurname);
        textFields.add(txtAdress);
        textFields.add(txtPhone);
        textFields.add(txtDob);
        textFields.add(txtMajorOrPosition);
        textFields.add(txtSportTeamOrDepartment);
        addMember(textFields);

        try {
            FileManager.getInstance().WriteMember();
            Member.saveEmpCount();
            System.out.println("done");
        } catch (IOException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_addMemberBtnActionPerformed

    private void txtDobMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDobMouseClicked
        dateChooser.setTextRefernce(txtDob);
        dateChooser.showPopup();
        SelectedDate d = dateChooser.getSelectedDate();
        System.out.println(d.getDay() + "-" + d.getMonth() + "-" + d.getYear());
        System.out.println("Text : " + txtDob.getText());
    }//GEN-LAST:event_txtDobMouseClicked

    private void editEmployeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editEmployeeBtnActionPerformed
        if (employeesTable.getSelectedRow() != -1) {
            Employee empFound = getEmpByID();
//                    Employee emp = GymSystem.employees.get(employeesTable.getSelectedRow());
            txtFirstNameEmployeeEdit.setText(empFound.getFirstName());
            txtSurnameEmployeeEdit.setText(empFound.getLastName());
            txtAddressEmployeeEdit.setText(empFound.getAddress());
            txtPhoneEmployeeEdit.setText(empFound.getPhone());
            txtSalaryEmployeeEdit.setText(String.valueOf(empFound.getSalary()));
            if (empFound instanceof PersonalTrainer) {
                trainerRadioBtnEdit.setSelected(true);
            } else {
                employeeRadioBtnEdit.setSelected(true);
            }
            cardLayout.show(pnlCards, "editEmployeePnl");
        } else {
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                }
            });
            obj.jLabel1.setText("<html>Please Select an employee From the table to edit.</html>");
            GlassPanePopup.showPopup(obj);
        }
    }//GEN-LAST:event_editEmployeeBtnActionPerformed

    private void button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button4ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_button4ActionPerformed

    private void employeeRadioBtnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeRadioBtnEditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeRadioBtnEditActionPerformed

    private void txtSurnameEmployeeEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSurnameEmployeeEditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSurnameEmployeeEditActionPerformed

    private void txtAddressEmployeeEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddressEmployeeEditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddressEmployeeEditActionPerformed

    private void txtPhoneEmployeeEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPhoneEmployeeEditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhoneEmployeeEditActionPerformed

    private void txtSalaryEmployeeEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSalaryEmployeeEditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSalaryEmployeeEditActionPerformed

    private void saveEmployeeEditBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveEmployeeEditBtnActionPerformed
        int errorCoutner;
        ArrayList<TextField> textFields = new ArrayList<TextField>();
        String[] errors = {"first name", "sur name", "Address", "Phone", "Salary"};
        textFields.add(txtFirstNameEmployeeEdit);
        textFields.add(txtSurnameEmployeeEdit);
        textFields.add(txtAddressEmployeeEdit);
        textFields.add(txtPhoneEmployeeEdit);
        textFields.add(txtSalaryEmployeeEdit);
        errorCoutner = 0;
        for (TextField textField : textFields) {
            if (!checkTxtField(textField, errors[errorCoutner])) {
                return;
            }
            errorCoutner++;
        }

        errorCoutner = 0;
        for (TextField textField : textFields) {
            if (!containsOnlyLetters(textField, errors[errorCoutner])) {
                return;
            }
            errorCoutner++;
            if (errorCoutner == 2) {
                break;
            }
        }
        for (int i = 3; i < textFields.size(); i++) {
            if (!containsOnlyNumbers(textFields.get(i), errors[i])) {
                return;
            }
        }
        if (employeesTable.getSelectedRow() != -1) {
            Employee empFound = getEmpByID();
            empFound.setFirstName(txtFirstNameEmployeeEdit.getText());
            empFound.setLastName(txtSurnameEmployeeEdit.getText());
            empFound.setAddress(txtAddressEmployeeEdit.getText());
            empFound.setPhone(txtPhoneEmployeeEdit.getText());
            empFound.setSalary(Double.parseDouble(txtSalaryEmployeeEdit.getText()));
            try {
                FileManager.getInstance().WriteEmployee();
            } catch (IOException ex) {
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        Message obj = new Message();
        obj.eventOK(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                GlassPanePopup.closePopupLast();
                populateEmployeesTable();
                cardLayout.show(pnlCards, "manageEmployeesPnl");

            }
        });
        obj.jLabel1.setText("Data has been updated");
        GlassPanePopup.showPopup(obj);
    }//GEN-LAST:event_saveEmployeeEditBtnActionPerformed

    private void backEmployeeEditBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backEmployeeEditBtnActionPerformed
        cardLayout.show(pnlCards, "manageEmployeesPnl");
    }//GEN-LAST:event_backEmployeeEditBtnActionPerformed

    private void deleteEmployeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEmployeeBtnActionPerformed
        if (employeesTable.getSelectedRow() != -1) {
            Employee empFound = getEmpByID();

            GymSystem.employees.remove(empFound);
            populateEmployeesTable();
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                }
            });
            obj.jLabel1.setText("An Employee has been removed");
            GlassPanePopup.showPopup(obj);

            try {
                FileManager.getInstance().WriteEmployee();
            } catch (IOException ex) {
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                }
            });
            obj.jLabel1.setText("<html>Please Select an employee From the table to remove.</html>");
            GlassPanePopup.showPopup(obj);
        }

    }//GEN-LAST:event_deleteEmployeeBtnActionPerformed

    private void txtSearchEmpKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchEmpKeyReleased
        DefaultTableModel tableModel = (DefaultTableModel) employeesTable.getModel();

        tableModel.setRowCount(0);
        for (Employee emp : GymSystem.employees) {

            String type = emp instanceof PersonalTrainer ? "Personal Trainer" : "Regular";
            String id = "" + emp.getId();
            String name = emp.getFullName();
            if (txtSearchEmp.getText().equalsIgnoreCase(id) || name.toLowerCase().contains(txtSearchEmp.getText().toLowerCase())) {
                employeesTable.addRow(new Object[]{id, name, type});
            }

        }    }//GEN-LAST:event_txtSearchEmpKeyReleased

    private void txtSearchMemberKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchMemberKeyReleased
        DefaultTableModel tableModel = (DefaultTableModel) membersTable.getModel();

        tableModel.setRowCount(0);
        for (Member mem : GymSystem.members) {

            String type = mem instanceof PolytechnicStaff ? "Polytechnic Staff" : "Polytechnic Student";
            String id = "" + mem.getId();
            String name = mem.getFullName();
            if (txtSearchMember.getText().equalsIgnoreCase(id) || name.toLowerCase().contains(txtSearchMember.getText().toLowerCase())) {
                membersTable.addRow(new Object[]{id, name, type});
            }
        }
    }//GEN-LAST:event_txtSearchMemberKeyReleased

    private void editMemberBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMemberBtnActionPerformed
        if (membersTable.getSelectedRow() != -1) {
            Member membFound = getMemByID();
            txtFirstNameMemberEdit.setText(membFound.getFirstName());
            txtSurNameMemberEdit.setText(membFound.getLastName());
            txtAdressMemberEdit.setText(membFound.getAddress());
            txtPhoneMemberEdit.setText(membFound.getPhone());
            txtDobEdit.setText(String.valueOf(membFound.getBirthDate()));
            if (membFound.getGender().equals("Male")) {
                maleEditBtn.setSelected(true);
            } else {
                femaleEditBtn.setSelected(true);
            }

            if (membFound instanceof PolytechnicStudent) {
                studentEditBtn.setSelected(true);
                lblMajorPositionEdit.setText("Major");
                lblSportDepartmentEdit.setText("Sport Team");
                txtMajorOrPositionEdit.setText(((PolytechnicStudent) membFound).getMajor());
                txtSportTeamOrDepartmentEdit.setText(((PolytechnicStudent) membFound).getTeam());
            } else {
                staffEditBtn.setSelected(true);
                lblMajorPositionEdit.setText("Position");
                lblSportDepartmentEdit.setText("Department");
                txtMajorOrPositionEdit.setText(((PolytechnicStaff) membFound).getPosition());
                txtSportTeamOrDepartmentEdit.setText(((PolytechnicStaff) membFound).getDepartment());
            }
            cardLayout.show(pnlCards, "editMemberPnl");
        } else {
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                }
            });
            obj.jLabel1.setText("<html>Please Select a member From the table to edit.</html>");
            GlassPanePopup.showPopup(obj);
        }    }//GEN-LAST:event_editMemberBtnActionPerformed

    private void deleteMemberBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMemberBtnActionPerformed
        if (membersTable.getSelectedRow() != -1) {
            Member memFound = getMemByID();

            GymSystem.members.remove(memFound);
            populateMembersTable();
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                }
            });
            obj.jLabel1.setText("A Member has been removed");
            GlassPanePopup.showPopup(obj);

            try {
                FileManager.getInstance().WriteMember();
            } catch (IOException ex) {
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                }
            });
            obj.jLabel1.setText("<html>Please Select a member From the table to remove.</html>");
            GlassPanePopup.showPopup(obj);
        }
    }//GEN-LAST:event_deleteMemberBtnActionPerformed

    private void txtFirstNameMemberEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFirstNameMemberEditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFirstNameMemberEditActionPerformed

    private void txtFirstNameMemberEditrepaintShadowForTextFields(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFirstNameMemberEditrepaintShadowForTextFields
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFirstNameMemberEditrepaintShadowForTextFields

    private void txtSurNameMemberEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSurNameMemberEditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSurNameMemberEditActionPerformed

    private void txtSurNameMemberEditrepaintShadowForTextFields(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSurNameMemberEditrepaintShadowForTextFields
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSurNameMemberEditrepaintShadowForTextFields

    private void txtPhoneMemberEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPhoneMemberEditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhoneMemberEditActionPerformed

    private void txtPhoneMemberEditrepaintShadowForTextFields(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPhoneMemberEditrepaintShadowForTextFields
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhoneMemberEditrepaintShadowForTextFields

    private void txtSportTeamOrDepartmentEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSportTeamOrDepartmentEditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSportTeamOrDepartmentEditActionPerformed

    private void txtSportTeamOrDepartmentEditrepaintShadowForTextFields(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSportTeamOrDepartmentEditrepaintShadowForTextFields
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSportTeamOrDepartmentEditrepaintShadowForTextFields

    private void txtAdressMemberEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAdressMemberEditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAdressMemberEditActionPerformed

    private void txtAdressMemberEditrepaintShadowForTextFields(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAdressMemberEditrepaintShadowForTextFields
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAdressMemberEditrepaintShadowForTextFields

    private void txtMajorOrPositionEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMajorOrPositionEditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMajorOrPositionEditActionPerformed

    private void txtMajorOrPositionEditrepaintShadowForTextFields(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMajorOrPositionEditrepaintShadowForTextFields
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMajorOrPositionEditrepaintShadowForTextFields

    private void saveMemberBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMemberBtnActionPerformed
        int errorCoutner;
        ArrayList<TextField> textFields = new ArrayList<TextField>();
        ArrayList<String> errors = new ArrayList<String>(Arrays.asList("first name", "sur name", "Address", "Phone", "Date of birth"));
        textFields.add(txtFirstNameMemberEdit);
        textFields.add(txtSurNameMemberEdit);
        textFields.add(txtAdressMemberEdit);
        textFields.add(txtPhoneMemberEdit);
        textFields.add(txtDobEdit);
        errorCoutner = 0;
        for (TextField textField : textFields) {
            if (!checkTxtField(textField, errors.get(errorCoutner))) {
                return;
            }
            errorCoutner++;
        }

        if (!checkRadioButtonGroup(genderButtonGroupEdit, "Gender")) {
            return;
        }

        textFields.add(txtMajorOrPositionEdit);
        if (studentBtn.isSelected()) {
            errors.add("Major");
        } else {
            textFields.add(txtSportTeamOrDepartmentEdit);
            errors.add("Position");
            errors.add("Depatment");
        }
        errorCoutner = 0;
        for (TextField textField : textFields) {
            if (!checkTxtField(textField, errors.get(errorCoutner))) {
                return;
            }
            errorCoutner++;
        }

        ArrayList<TextField> letterTextFields = new ArrayList<TextField>();
        letterTextFields.add(txtFirstNameMemberEdit);
        letterTextFields.add(txtSurNameMemberEdit);
        letterTextFields.add(txtMajorOrPositionEdit);
        letterTextFields.add(txtSportTeamOrDepartmentEdit);
        ArrayList<String> letterErrors = new ArrayList<String>(Arrays.asList("first name", "sur name"));
        if (studentEditBtn.isSelected()) {
            letterErrors.add("Major");
            letterErrors.add("Sport Team");
        } else {
            letterErrors.add("Position");
            letterErrors.add("Depatment");
        }
        errorCoutner = 0;
        for (TextField textField : letterTextFields) {
            if (!containsOnlyLetters(textField, letterErrors.get(errorCoutner))) {
                return;
            }
            errorCoutner++;

        }

        if (!containsOnlyNumbers(txtPhoneMemberEdit, "Phone")) {
            return;
        }
        if (membersTable.getSelectedRow() != -1) {
            Member membFound = getMemByID();
            System.out.println(txtFirstNameMemberEdit.getText());
            membFound.setFirstName(txtFirstNameMemberEdit.getText());
            membFound.setLastName(txtSurNameMemberEdit.getText());
            membFound.setAddress(txtAdressMemberEdit.getText());
            membFound.setPhone(txtPhoneMemberEdit.getText());
            membFound.setBirthDate(txtDobEdit.getText());

            if (membFound instanceof PolytechnicStudent) {
                ((PolytechnicStudent) membFound).setMajor(txtMajorOrPositionEdit.getText());
                ((PolytechnicStudent) membFound).setTeam(txtSportTeamOrDepartmentEdit.getText());
            } else {
                ((PolytechnicStaff) membFound).setPosition(txtMajorOrPositionEdit.getText());
                ((PolytechnicStaff) membFound).setDepartment(txtSportTeamOrDepartmentEdit.getText());
            }
            try {
                FileManager.getInstance().WriteMember();
            } catch (IOException ex) {
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        Message obj = new Message();
        obj.eventOK(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                GlassPanePopup.closePopupLast();
                populateMembersTable();
                cardLayout.show(pnlCards, "manageMembersPnl");

            }
        });
        obj.jLabel1.setText("Data has been updated");
        GlassPanePopup.showPopup(obj);

        try {
            FileManager.getInstance().WriteMember();

        } catch (IOException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_saveMemberBtnActionPerformed

    private void backMemberBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backMemberBtnActionPerformed
        populateMembersTable();
        cardLayout.show(pnlCards, "manageMembersPnl");
    }//GEN-LAST:event_backMemberBtnActionPerformed

    private void txtDobEditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDobEditMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDobEditMouseClicked

    private void txtDobEditrepaintShadowForTextFields(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDobEditrepaintShadowForTextFields
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDobEditrepaintShadowForTextFields

    private void pickDateBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickDateBtn1ActionPerformed
        dateChooserEdit.showPopup();
    }//GEN-LAST:event_pickDateBtn1ActionPerformed

    private void editMemberPnlrepaintShadowForTextFields(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editMemberPnlrepaintShadowForTextFields
        // TODO add your handling code here:
    }//GEN-LAST:event_editMemberPnlrepaintShadowForTextFields

    private void txtSearchMemberTrainerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchMemberTrainerKeyReleased
        assignTrainerComboBox();
        for (Member mem : GymSystem.members) {
            boolean found = false;
            String name = null;
            int id = 0;
            if (txtSearchMemberTrainer.getText().equalsIgnoreCase(mem.getId() + "") || mem.getFullName().toLowerCase().contains(txtSearchMemberTrainer.getText().toLowerCase())) {
                for (Employee emp : GymSystem.employees) {
                    if (emp instanceof PersonalTrainer) {

                        for (Member empFound : ((PersonalTrainer) emp).getMembers()) {
                            if (empFound.getId() == mem.getId()) {
                                found = true;
                                name = emp.getFullName();
                                id = emp.getId();
                                break;
                            }
                        }
                    }
                }
                if (found) {
                    membersAssignTrainerTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Staff", name + " (" + id + ")"});
                } else if (!found) {
                    membersAssignTrainerTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Student", "(None)"});
                }
            }
        }
    }//GEN-LAST:event_txtSearchMemberTrainerKeyReleased

    private void membersAssignTrainerTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_membersAssignTrainerTablePropertyChange
        ArrayList<PersonalTrainer> PS = new ArrayList<PersonalTrainer>();
        PS.removeAll(PS);
        for (Employee emp : GymSystem.employees) {
            if (emp instanceof PersonalTrainer) {
                PS.add((PersonalTrainer) emp);
            }
        }
        Member selectedMember = null;
        if (membersAssignTrainerTable.getSelectedRow() != -1) {
            selectedMember = getMemTrainerByID();
        }
        if (membersAssignTrainerTable.getSelectedRow() != -1) {
            if (assignedTrainerComboBox.getSelectedIndex() >= 1 && membersAssignTrainerTable.getValueAt(membersAssignTrainerTable.getSelectedRow(), 3) != "(None)") {
                for (PersonalTrainer ps : PS) {
                    for (Member empFound : ps.getMembers()) {
                        if (selectedMember.getId() == empFound.getId()) {
                            ps.getMembers().remove(empFound);
                            break;
                        }
                    }

                }
                PS.get(assignedTrainerComboBox.getSelectedIndex() - 1).getMembers().add(selectedMember);
            } else {
                for (PersonalTrainer ps : PS) {
                    for (Member empFound : ps.getMembers()) {
                        if (selectedMember.getId() == empFound.getId()) {
                            System.out.println(empFound.getId());
                            System.out.println(empFound.getFullName());
                            ps.getMembers().remove(empFound);
                            Message obj = new Message();
                            obj.eventOK(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent ae) {
                                    GlassPanePopup.closePopupLast();
                                }
                            });
                            obj.jLabel1.setText("<html>Personal Trainer has been removed from " + membersAssignTrainerTable.getValueAt(membersAssignTrainerTable.getSelectedRow(), 1) + "</html>");
                            GlassPanePopup.showPopup(obj);
                            break;
                        }
                    }
                }

            }
        }

        try {
            FileManager.getInstance().WriteEmployee();
        } catch (IOException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_membersAssignTrainerTablePropertyChange

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.out.println(((PersonalTrainer) GymSystem.employees.get(0)).getMembers().size());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtSearchTrainerMemberKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchTrainerMemberKeyReleased
        DefaultTableModel tableModel = (DefaultTableModel) trainerMembersTable.getModel();

        tableModel.setRowCount(0);
        PersonalTrainer empFound = null;
        for (Employee emp : GymSystem.employees) {
            if (emp instanceof PersonalTrainer) {
                String idString = String.valueOf(personalTrainerTable.getValueAt(personalTrainerTable.getSelectedRow(), 0));
                String empIDString = "" + emp.getId();
                if (empIDString.equals(idString)) {
                    empFound = (PersonalTrainer) emp;
                    break;
                }
            }
        }
        for (Member mem : empFound.getMembers()) {

            String type = mem instanceof PolytechnicStaff ? "Polytechnic Staff" : "Polytechnic Student";
            String id = "" + mem.getId();
            String name = mem.getFullName();
            if (txtSearchTrainerMember.getText().equalsIgnoreCase(id) || name.toLowerCase().contains(txtSearchTrainerMember.getText().toLowerCase())) {
                trainerMembersTable.addRow(new Object[]{id, name, type, mem.getPhone()});
            }
        }
    }//GEN-LAST:event_txtSearchTrainerMemberKeyReleased

    private void deleteMemberBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMemberBtn1ActionPerformed
        cardLayout.show(pnlCards, "listPersonalTrainerPnl");
    }//GEN-LAST:event_deleteMemberBtn1ActionPerformed

    private void txtSearchTrainerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchTrainerKeyReleased
        DefaultTableModel tableModel = (DefaultTableModel) personalTrainerTable.getModel();

        tableModel.setRowCount(0);
        for (Employee emp : GymSystem.employees) {
            String id = "" + emp.getId();
            String name = emp.getFullName();
            if (txtSearchTrainer.getText().equalsIgnoreCase(id) || name.toLowerCase().contains(txtSearchTrainer.getText().toLowerCase())) {
                personalTrainerTable.addRow(new Object[]{id, name, ((PersonalTrainer) emp).getMembers().size()});
            }

        }
    }//GEN-LAST:event_txtSearchTrainerKeyReleased

    private void personalTrainerTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_personalTrainerTableMouseReleased
        populateTrainerMembersTable();
        cardLayout.show(pnlCards, "trainerMembersPnl");
    }//GEN-LAST:event_personalTrainerTableMouseReleased

    private void txtFirstNameEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFirstNameEmployeeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFirstNameEmployeeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainPage().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEmployeeImageBtn;
    private javax.swing.JPanel addEmployeePnl;
    private javax.swing.JButton addMemberImageBtn;
    private javax.swing.JPanel addMemberPnl;
    private javax.swing.JButton assignTrainerImageBtn;
    private javax.swing.JPanel assignTrainerPnl;
    private javax.swing.JLabel bahrainLabel;
    private javax.swing.JPanel dashboardPnl;
    private javax.swing.JPanel editEmployeePnl;
    private javax.swing.JPanel editMemberPnl;
    private javax.swing.JLabel emoployeeSectionLabel;
    private javax.swing.ButtonGroup employeeTypeBtnGroup;
    private javax.swing.ButtonGroup genderButtonGroup;
    private javax.swing.ButtonGroup genderButtonGroupEdit;
    private javax.swing.JLabel gymImage;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel listPersonalTrainerPnl;
    private javax.swing.JSplitPane mainPage;
    private javax.swing.JPanel manageEmployeesPnl;
    private javax.swing.JPanel manageMemberssPnl;
    private javax.swing.JLabel memberSectionLabel;
    private javax.swing.ButtonGroup memberTypeGroupButton;
    private javax.swing.JPanel nvigPnl;
    private javax.swing.JPanel pnlCards;
    private javax.swing.JLabel polyLabel;
    private javax.swing.JPanel trainerMembersPnl;
    private javax.swing.JButton truckEmployeeInformationImageBtn;
    private javax.swing.JButton truckMemberInformationImageBtn;
    // End of variables declaration//GEN-END:variables

    public boolean checkTxtField(TextField textField, String error) {
        if (textField.getText().isEmpty() || textField.getText() == null) {
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                    textField.setShadowColor(Color.red);
                    textField.requestFocus();
                }
            });
            obj.jLabel1.setText("Please fill the " + error + " text field");
            GlassPanePopup.showPopup(obj);

            return false;
        }

        return true;
    }

    public boolean checkRadioButtonGroup(ButtonGroup buttonGroup, String error) {
        if (buttonGroup.getSelection() == null) {
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();

                }
            });
            obj.jLabel1.setText("Please Choose the " + error);
            GlassPanePopup.showPopup(obj);
            return false;
        }
        return true;
    }

    public void repaitShadow(Object textField) {
        Color gray = new Color(0, 0, 0);
        if (textField instanceof TextField) {
            if (((TextField) textField).getText() != null) {
                ((TextField) textField).setShadowColor(gray);

            }
        }
    }

    public boolean containsOnlyLetters(TextField textField, String error) {
        for (char c : textField.getText().toCharArray()) {
            if (!Character.isLetter(c)) {
                Message obj = new Message();
                obj.eventOK(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent ae) {
                        GlassPanePopup.closePopupLast();
                        textField.setShadowColor(Color.red);
                        textField.requestFocus();
                    }
                });
                obj.jLabel1.setText("<html>The " + error + " text field should contain only letters.</html>");
                GlassPanePopup.showPopup(obj);
                return false;
            }
        }
        return true;
    }

    public boolean containsOnlyNumbers(TextField textField, String error) {
        for (char c : textField.getText().toCharArray()) {
            if (!Character.isDigit(c) && c != '.' && textField.getText().charAt(0) != '+') {
                Message obj = new Message();
                obj.eventOK(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent ae) {
                        GlassPanePopup.closePopupLast();
                        textField.setShadowColor(Color.red);
                        textField.requestFocus();
                    }
                });
                obj.jLabel1.setText("<html>The " + error + " text field should contain only numbers.</html>");
                GlassPanePopup.showPopup(obj);
                return false;
            }
        }
        return true;
    }
//change navButton
    NavButton tempButton = null;
    Color darkBlue = new Color(2, 73, 89);

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof NavButton) {
            if (dashboardBtn.getBackground().equals(darkBlue)) {
                dashboardBtn.setBackground(new Color(11, 158, 191));
                NavButton button = (NavButton) e.getSource();
                tempButton = button;
            }
            NavButton button = (NavButton) e.getSource();
            tempButton.setBackground(new Color(11, 158, 191));
            tempButton.setShadowColor(new Color(11, 158, 191));
            button.setBackground(darkBlue);
            button.setShadowColor(new Color(170, 170, 170));
            tempButton = button;
        }

//        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    public void addEmployee(ArrayList<TextField> textFields) {
        try {
            Employee newEmp = null;
            if (employeeRadioBtn.isSelected()) {
                newEmp = new Employee(textFields.get(0).getText(), textFields.get(1).getText(),
                        textFields.get(2).getText(), textFields.get(3).getText(), Double.parseDouble(textFields.get(4).getText()));
                System.out.println("emp");

            } else {
                newEmp = new PersonalTrainer(textFields.get(0).getText(), textFields.get(1).getText(),
                        textFields.get(2).getText(), textFields.get(3).getText(), Double.parseDouble(textFields.get(4).getText()));
                System.out.println("ps");
            }
            GymSystem.employees.add(newEmp);

            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                }
            });
            obj.jLabel1.setText("Employee has been added ");
            GlassPanePopup.showPopup(obj);
        } catch (Exception e) {
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();

                }
            });
            obj.jLabel1.setText("Please check your input data");
            GlassPanePopup.showPopup(obj);
        }
    }

    public void addMember(ArrayList<TextField> textFields) {
        String gender = maleBtn.isSelected() ? "Male" : "Female"; //ternary operator
        String team = (!textFields.get(6).getText().isBlank() || !textFields.get(6).getText().isEmpty() || textFields.get(6).getText() != null) ? textFields.get(6).getText() : null;
        try {
            Member newMem = null;
            if (studentBtn.isSelected()) {
                newMem = new PolytechnicStudent(textFields.get(0).getText(), textFields.get(1).getText(),
                        textFields.get(2).getText(), textFields.get(3).getText(), gender, textFields.get(4).getText(), textFields.get(5).getText(), team);
                System.out.println("student");

            } else {
                newMem = new PolytechnicStaff(textFields.get(0).getText(), textFields.get(1).getText(),
                        textFields.get(2).getText(), textFields.get(3).getText(), gender, textFields.get(4).getText(), textFields.get(5).getText(), textFields.get(6).getText());
                System.out.println("staff");
            }

            GymSystem.members.add(newMem);

            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                }
            });
            obj.jLabel1.setText("Member has been added ");
            GlassPanePopup.showPopup(obj);
        } catch (Exception e) {
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();

                }
            });
            obj.jLabel1.setText("Please check your input data");
            GlassPanePopup.showPopup(obj);
        }
    }

    public void populateEmployeesTable() {
        DefaultTableModel model = (DefaultTableModel) employeesTable.getModel();
        model.setRowCount(0);
        for (Employee emp : GymSystem.employees) {
            if (emp instanceof PersonalTrainer) {
                employeesTable.addRow(new Object[]{emp.getId(), emp.getFullName(), "Personal Trainer"});
            } else {
                employeesTable.addRow(new Object[]{emp.getId(), emp.getFullName(), "Regular"});
            }
        }
    }

    public void populateMembersTable() {
        DefaultTableModel model = (DefaultTableModel) membersTable.getModel();
        model.setRowCount(0);
        for (Member mem : GymSystem.members) {
            if (mem instanceof PolytechnicStaff) {
                membersTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Staff"});
            } else {
                membersTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Student"});
            }
        }
    }

    public void populateTrainerMembersTable() {
        DefaultTableModel model = (DefaultTableModel) trainerMembersTable.getModel();
        model.setRowCount(0);
        PersonalTrainer empFound = null;
        for (Employee emp : GymSystem.employees) {
            if (emp instanceof PersonalTrainer) {
                String idString = String.valueOf(personalTrainerTable.getValueAt(personalTrainerTable.getSelectedRow(), 0));
                String empIDString = "" + emp.getId();
                if (empIDString.equals(idString)) {
                    empFound = (PersonalTrainer) emp;
                    break;
                }
            }
        }
        for (Member mem : empFound.getMembers()) {
            if (mem instanceof PolytechnicStaff) {
                trainerMembersTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Staff", mem.getPhone()});
            } else {
                trainerMembersTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Student", mem.getPhone()});
            }
        }

        lblTrainerName.setText(empFound.getFullName() + " Members List");
    }

    public void populateTrainersTable() {
        DefaultTableModel model = (DefaultTableModel) personalTrainerTable.getModel();
        model.setRowCount(0);
        for (Employee emp : GymSystem.employees) {
            if (emp instanceof PersonalTrainer) {
                personalTrainerTable.addRow(new Object[]{emp.getId(), emp.getFullName(), ((PersonalTrainer) emp).getMembers().size()});
            }
        }
    }
//    public void populateMembersTrainerTable() {
//        DefaultTableModel model = (DefaultTableModel) membersAssignTrainerTable.getModel();
//        model.setRowCount(0);
//        for (Member mem : GymSystem.members) {
//            if (mem instanceof PolytechnicStaff) {
//                membersAssignTrainerTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Staff"});
//            } else {
//                membersAssignTrainerTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Student"});
//            }
//        }
//    }

    public void clearTextFields(ArrayList<TextField> textFields) {
        for (TextField textField : textFields) {
            textField.setText("");
        }

    }

    public Employee getEmpByID() {
        int row = employeesTable.getSelectedRow();
        Object id = employeesTable.getModel().getValueAt(row, 0);
        String idString = id.toString();
        int idFound = Integer.parseInt(idString);

        for (Employee emp : GymSystem.employees) {

            if (emp.getId() == idFound) {
                return emp;
            }
        }

        return null;
    }

    public Member getMemByID() {
        int row = membersTable.getSelectedRow();
        Object id = membersTable.getModel().getValueAt(row, 0);
        String idString = id.toString();
        int idFound = Integer.parseInt(idString);

        for (Member mem : GymSystem.members) {

            if (mem.getId() == idFound) {
                return mem;
            }
        }

        return null;
    }

    public Member getMemTrainerByID() {
        int row = membersAssignTrainerTable.getSelectedRow();
        Object id = membersAssignTrainerTable.getModel().getValueAt(row, 0);
        String idString = id.toString();
        int idFound = Integer.parseInt(idString);

        for (Member mem : GymSystem.members) {

            if (mem.getId() == idFound) {
                return mem;
            }
        }

        return null;
    }

    public void assignTrainerComboBox() {
        assignedTrainerComboBox.removeAllItems();
        DefaultTableModel model = (DefaultTableModel) membersAssignTrainerTable.getModel();
        model.setRowCount(0);

        ArrayList<PersonalTrainer> PS = new ArrayList<PersonalTrainer>();
        PS.removeAll(PS);
        for (Employee emp : GymSystem.employees) {
            if (emp instanceof PersonalTrainer) {
                PS.add((PersonalTrainer) emp);
            }
        }
        assignedTrainerComboBox.addItem("(None)");

        for (PersonalTrainer emp : PS) {
            assignedTrainerComboBox.addItem(emp.getFullName() + " (" + emp.getId() + ")");

        }
    }

//    private class Cope extends ComboBoxSuggestion {
//
//        Cope() {
//            setEditable(false);
//            addItem("(None)");
//
//            setBackground(new java.awt.Color(137, 255, 255));
//            for (Employee emp : GymSystem.employees) {
//                addItem(emp.getFullName());
//            }
//        }
//    }
}
//
//    public boolean containsOnlyLetters(String str) {
//        if (str == null || str.isEmpty()) {
//            return false;
//        }
//        for (char c : str.toCharArray()) {
//            if (!Character.isLetter(c)) {
//                return false;
//            }
//        }
//        return true;
//    }
//
//    public boolean containsOnlyNumbers(String str) {
//        if (str == null || str.isEmpty()) {
//            return false;
//        }
//        for (char c : str.toCharArray()) {
//            if (!Character.isDigit(c)) {
//                return false;
//            }
//        }
//        return true;
//    }
